language: c
compiler: gcc

sudo: required

services:
    - docker

jobs:
    include:
        - stage: build docker image
          script:
            - sudo apt-get update
            - echo "ENV GIT_SHA ${TRAVIS_COMMIT}" >> Dockerfile
            - echo "ENV MACHINE_ID ${MACHINE_ID}" >> Dockerfile
            - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
            - docker --version
            - docker build -t ${DOCKER_REPOSITORY} --pull=true .
            - docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            - docker push ${DOCKER_REPOSITORY}

        - stage: build
          script:
            # Load docker image from shared aws for build
            - docker run -dit --name travis_build ${DOCKER_REPOSITORY} bash
            - docker exec -u 0 -ti travis_build bash -c "echo ${MACHINE_ID} > /etc/machine-id"
            - docker exec -ti travis_build meson build
            - docker exec -ti travis_build ninja -C build
              # Commit it to the new image that will be used for testing and share it to aws
            - docker commit -m "systemd build" -a %{author} travis_build ${DOCKER_REPOSITORY}
            - docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            - docker push ${DOCKER_REPOSITORY}
        - stage: test
          script:
            # Load docker image from shared aws for testing
            - docker run --privileged --net=host -dit --name travis_test ${DOCKER_REPOSITORY} bash -c "ninja -C build test"
            - docker commit -m "systemd tests" -a %{author} travis_test ${DOCKER_REPOSITORY}
            - docker login -u="${DOCKER_USERNAME}" -p="${DOCKER_PASSWORD}"
            - docker push ${DOCKER_REPOSITORY}
        # Future idea ... will not run now probably FIXME
        - stage: coverity scan
          addons:
             coverity_scan:
                 project:
                     name: systemd/systemd  # GitHub project name FIXME
                     description: systemd System and Service Manager

                 notification_email: macermak@redhat.com

                 # Commands to prepare for build
                 build_command_prepend: meson build

                 # The command that will be added as an argument to "cov-build" to compile your project for analysis,
                 build_command: ninja -C build

# Specify the order of stages and conditions
stages:
    - build docker image
    - name: build
      if: env(COVERITY_SCAN_BRANCH) != 1
    - name: test
      if: env(COVERITY_SCAN_BRANCH) != 1
    - name: coverity scan
    #   if: type = cron

after_failure: 
    - docker run  -it --name travis_log ${DOCKER_REPOSITORY} bash -c "cat build/meson-logs/testlog.txt"

env:
    global:
        - MACHINE_ID=$(cat /var/lib/dbus/machine-id)
        - DOCKER_REPOSITORY=$DOCKER_USERNAME/$TRAVIS_COMMIT
        - COMMITTER_EMAIL="$(git log -1 $TRAVIS_COMMIT --pretty="%cE")"
        - AUTHOR_NAME="$(git log -1 $TRAVIS_COMMIT --pretty="%aN")"

before-script:
    - env > .env

# Temporary solution - only for testing purposes, delete afterwards
branches:
    only:
        travis-docker

# notifications:
#   irc:
#     channels:
#       - "irc.freenode.org#systemd"
#     on_success: change
#     on_failure: always
